{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This documentation is intended for other ST Engineering interns who just joined or are currently working on the LiDAR project. All related information will be collated here. However, keep in mind that this documentation is based on my time &amp; experiences working here, so I will not know about future changes.</p>"},{"location":"#quick-description","title":"Quick description","text":"<p>Each page will hold all relevant information accordingly. Reference links will be included in each page as well for more information.</p>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...\n\n    assets/ # Folder containing images used in all the pages\n    ...\n</code></pre>"},{"location":"gnss/","title":"GNSS","text":"<p>GNSS model: - simpleRTK2B series receiver (Basic Starter Kit) - Multi-band Active GNSS Antenna ANN-MB-00-00 (IP67)</p> <p></p> <p>Related links: - Hardware documentation: https://www.ardusimple.com/how-to-use-ardusimple-rtk-receivers-and-get-gps-data-in-ros/ - ublox GPS driver: https://github.com/KumarRobotics/ublox</p>"},{"location":"gnss/#introduction","title":"Introduction","text":"<p>The GNSS will be used to get a LiDAR's exact location. This will be useful for running a simulation as well as identify where a particular LiDAR is in a bigger system. </p>"},{"location":"gnss/#setting-up","title":"Setting up","text":"<p>We will be using ROS to handle the GNSS. Take note that the GNSS will most likely be unable to connect to your computer as it runs on a different version of WSL. Hence, it would be recommended to configure/run the GNSS on the Aruvii laptop. </p> <p>You can follow the hardware documentation link above as well as refer to the notes that I have taken down. You will not need to follow every step of the link above as some steps have already been configured.</p> <p>In any terminal opened, always source ~/catkin_ws/devel/setup.bash</p> <p>1) First, check if the laptop is able to detect the USB being inserted. Enter ls /dev/ttyUSB* in the terminal, insert the USB and enter the same command again.  1) Next, launch the program with roslaunch ublox_gps ublox_device.launch param_file_name:=zed_f9p  1 2) Open a new terminal and source     - rostopic echo /ublox/fix: to observe and monitor the GPS fix data being published (longitude , latitude, etc)     - rostopic echo /diagnostics: gives the information of the GPS status like accuracy amung others 3) To record GPS fix data being published on \u201c/ublox/fix\u201d Topic, enter rostopic echo /ublox/fix &gt; gps_fix_data.txt 4) To record data about the GPS status \u201c/diagnostics\u201d, enter rostopic echo /diagnostics &gt; gps_diagnostics.txt 5) To see the info recorded in the files, enter nano gps_fix_data.txt or nano gps_diagnostics.txt 6) For example, the \u201csensor_msgs/NavSatFix\u201d is a message type in ROS that is used to represent GPS fix data like the latitude, longitude, altitude, and other parameters related to the GPS position.  To see the structure of \u201csensor_msgs/NavSatFix\u201d message,  enter, rosmsg show sensor_msgs/NavSatFix. 7) For example, to obtain the current logger configuration of the u-blox Node, which can be helpful for debugging and monitoring purposes, enter rosservice info /ublox/get_loggers  </p> <p>Summary: 1st terminal: roslaunch ublox_gps ublox_device.launch param_file_name:=zed_f9p     - launch program 2nd terminal: rostopic echo /ublox/fix     - see the GPS data being published  </p> <p>Another way to test the GNSS is to use the u-center software that should already be installed in the Aruvii laptop. You will be able to see the latitude and longtitude, which should correspond to your current location.</p> <p></p>"},{"location":"gnss/#notes","title":"Notes","text":"<ul> <li>If you want to follow the hardware documentation, under step 14, creating a COM11 port will not work. However, it should work if you use COM3 instead.  </li> <li>You should be testing the GNSS in an open-space environment, where the antenna has a direct view to the sky. You can go to a rooftop and try it out.</li> </ul>"},{"location":"gnss/#tasks","title":"Tasks","text":"<ul> <li>Start &amp; receive data with the GNSS on the laptop</li> <li>Publish GPS data to ROS as a ROS message (sensor_msgs/NavSatFix or otherwise)</li> </ul>"},{"location":"imu/","title":"IMU","text":"<p>IMU model: - HFI-A9 Handsfree ROS IMU</p>"},{"location":"imu/#_1","title":"IMU","text":"<p>Related links: - Original hardware documentation/Drivers: https://gitee.com/HANDS-FREE/handsfree_ros_imu/ - English translation/Tutorial: https://docs.taobotics.com/docs/hfi-imu/hfi-imu-en/03_Basic_Tutorial/03_ROS_driver_and_visualization/doc.html</p>"},{"location":"imu/#introduction","title":"Introduction","text":"<p>(How imu works and why its purpose here)</p>"},{"location":"imu/#setting-up","title":"Setting up","text":"<p>Just like the GNSS, it would be recommended to set up the IMU with the Aruvii laptop.</p> <p>Referring to the tutorial link above, it should be enough to get the IMU up and running.</p> <p>Check if the laptop is able to detect the USB being inserted. Enter ls /dev/ttyUSB* in the terminal, insert the USB and enter the same command again. </p>"},{"location":"imu/#tasks","title":"Tasks","text":"<ul> <li>Start &amp; receive data with IMU on the laptop</li> <li>Publish IMU Data to ROS as a ROS message (sensor_msgs/Imu or otherwise)</li> <li>Calculate heading/RPY from Magnetometer readings</li> </ul>"},{"location":"pre-read/","title":"Information about LiDAR","text":""},{"location":"pre-read/#lidar","title":"LiDAR","text":"<p>This page will contain information that is useful to know before working on the project. You can treat it as prerequesite reading.</p>"},{"location":"pre-read/#caus-sensors-and-solutions","title":"CAUS sensors and solutions","text":"<p>CAUS (Counter Unmanned Aircraft Systems) purpose is to prevent nefarious or unauthorised drones from disrupting places. Counter-drone solutions are to identify, track and mitigate threats, providing airspace security. </p>"},{"location":"pre-read/#types-of-caus-sensors","title":"Types of CAUS sensors:","text":"<ul> <li>Radar</li> <li>RF (Radio Frequency) Analysers</li> <li>Accoustic</li> <li>Optical</li> </ul> <p>Some CAUS technologies only use one type of sensor. Others can also opt to include a method of mitigation.</p> <p>There are 4 methods to mitigate threats: - Jamming - Cyber-Takeover - Kinetic - High-Energy</p>"},{"location":"pre-read/#point-cloud-simulation","title":"Point Cloud Simulation","text":"<p>A point cloud is a collection of data points plotted in a 3D environment.The LiDAR collects data and a software program takes that data to form a point cloud simulation.</p> <p></p>"},{"location":"pre-read/#roi-region-of-interest","title":"ROI - Region of Interest","text":"<p>Think of ROI as a specific portion of an image that is being focused on by the LiDAR. </p>"},{"location":"relay/","title":"Relay","text":""},{"location":"relay/#ethernet-relay-board","title":"Ethernet Relay Board","text":"<p>Board model: Dingtian 4-Channel Relay Board </p> <p>Dingtian webpage link: https://www.dingtian-tech.com/en_us/relay4.html SDK download link: http://www.dingtian-tech.com/sdk/relay_sdk.zip</p> <p>Before starting on the tasks below, download the SDK from the link above. This zipfile from the manufacterer provides all neccessary/related information to operate the relay board. </p>"},{"location":"relay/#tasks","title":"Tasks","text":"<p>Try to complete most of the tasks given here. You can choose to use any programming language you want as long as it works.  </p> <ol> <li>Able to enable and disable individual relays  </li> <li>Disable all relays in one command  </li> <li>Get and show current status of all relays  </li> <li>After 3 seconds with no commands, disable the relay automatically.  </li> <li>Show current status every time a command is sent to a relay  </li> <li>Add MQTT support: (optional)  <ul> <li>2 topics per relay (enable/disable)  </li> <li>One \u201cdisable all\u201d topic  </li> <li>One relay status topic  </li> </ul> </li> <li>User checking via json (optional)</li> </ol> <p>An example snippet using Python: <pre><code>r = requests.get(\"http://192.168.7.1/relay_cgi.cgi?type=0&amp;relay=0&amp;on=1&amp;time=0&amp;pwd=0&amp;\")\n</code></pre></p>"},{"location":"relay/#note","title":"Note","text":"<p>192.168.7.1 -&gt; WIFI 192.168.1.100 -&gt; ETH  </p> <ul> <li> <p>The output will look something like \"&amp;0&amp;0&amp;0&amp;1&amp;0&amp;\" if it is successful.</p> </li> <li> <p>There is a chance that there may be a hardware issue if your code is working perfectly fine. (Relays not turning on) If you suspect so, either swap your relay board or download the Thunder Client extension on Visual Studio Code. This will show if the outputs are working with your code.</p> </li> </ul>"},{"location":"resources/","title":"All links/docs","text":""},{"location":"resources/#resources","title":"Resources","text":""},{"location":"resources/#all-links","title":"All links","text":"<p>Dingtian webpage: https://www.dingtian-tech.com/en_us/relay4.html Relay SDK download: http://www.dingtian-tech.com/sdk/relay_sdk.zip WSL installation: https://learn.microsoft.com/en-us/windows/wsl/install ROS Noetic installation: https://wiki.ros.org/noetic/Installation/Ubuntu ROS tutorials: https://wiki.ros.org/ROS/Tutorials Writing a Simple Publisher and Subscriber: http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28python%29 ROS Parameter Server: http://wiki.ros.org/Parameter%20Server  Roslaunch: http://wiki.ros.org/roslaunch GNSS Hardware documentation: https://www.ardusimple.com/how-to-use-ardusimple-rtk-receivers-and-get-gps-data-in-ros/ ublox GPS driver: https://github.com/KumarRobotics/ublox IMU hardware documentation/Drivers: https://gitee.com/HANDS-FREE/handsfree_ros_imu/ IMU (English translation) documentation/Tutorial: https://docs.taobotics.com/docs/hfi-imu/hfi-imu-en/03_Basic_Tutorial/03_ROS_driver_and_visualization/doc.html Raspberry Pi documentation: https://www.raspberrypi.com/documentation/computers/getting-started.html </p>"},{"location":"ritz/","title":"LiDAR Setup & Handling","text":""},{"location":"ritz/#software","title":"Software","text":"<p>This page will be touching on how to setup the lidar as well as the programs used to operate the lidar. (Metaview &amp; Ritz)</p>"},{"location":"ritz/#physical-setup","title":"Physical Setup","text":"<ul> <li>Take note that everytime you connect the lidar to the Aruvii laptop, you will have to switch the connection settings to LiDAR as the default selection is relay. The lidar will not show any output if not done so.</li> </ul>"},{"location":"ritz/#metaview","title":"Metaview","text":"<p>This is used to look at what the LiDAR can see as well as control the location of the ROI. </p> <p>There are 2 methods when it comes to configuring the ROI; one for controlling its particular position (centroid), the other for adjusting its parameters. </p>"},{"location":"ritz/#ritz","title":"Ritz","text":"<p>Ritz is a 3d simulation that produces the LiDAR output over your current location. With Ritz, you can see the detection and tracking of drones, as well as configure lidar parameters to refine the detection output (known as rqt_reconfigure).</p> <p>update with more pictures &amp; notes later on:  - pictures of physical setup - screenshot the connection settings in the laptop  - screenshots for ROI in metaview, rqt_reconfigure, virtual zone in ritz &amp; detection outputs(green boxes) - video of drone getting detected (can use the videos i took when we were testing in office) - (kiv) can add in Raj's notes for better understanding, or redraw the illustrations for better clarity.</p>"},{"location":"ros-tasks/","title":"Tasks","text":""},{"location":"ros-tasks/#tasks","title":"Tasks","text":"<p>Try these after going through ROS tutorials.</p> <p>1) Basic Chat Program - Should have two separate ROS Nodes - Message typed in one Node should be displayed in the other Node - Messages should go through ROS - Messages should be visible via <code>rostopic echo</code> - Be able to record via <code>rosbag</code> the messages being sent and received</p> <p>2) Further Features (Optional) - Configurable topic names via Parameter server - Config file as <code>.yaml</code> file - Add a bot node that sends a message every X seconds - Use a <code>.launch</code> file to start multiple nodes at once</p> <p>Even though implementing parameter and launch file are optional, you should at least have an understanding on how those concepts work.</p>"},{"location":"ros-tasks/#note","title":"Note","text":"<p>If you run into this particular error: /usr/bin/env: \u2018python3\\r\u2019: No such file or directory You can try installing dos2unix, before converting your scripts. You can do with something like this: <pre><code>sudo apt install dos2unix\n</code></pre></p> <p>Once installed, you can convert your script accordingly: <pre><code>dos2unix &lt;file_name&gt;.py\n</code></pre></p> <p>Separately, do try to run your script locally and see if it's working, you will also need to take note to include the\u00a0shebang line\u00a0in your script. <pre><code>#!/usr/bin/env python3\n</code></pre> Note that above is for\u00a0<code>python3</code>, use\u00a0<code>python</code>\u00a0if necessary.</p> <p>Reference link: https://askubuntu.com/questions/896860/usr-bin-env-python3-r-no-such-file-or-directory</p>"},{"location":"ros-tutorials/","title":"Tutorials","text":""},{"location":"ros-tutorials/#ros-tutorials","title":"ROS Tutorials","text":"<p>Reference link: https://wiki.ros.org/ROS/Tutorials</p> <p>You can choose to use Python or C++. It would be recommended to be familiar with the basics of Linux before learning ROS if you are not already acquainted with it. </p>"},{"location":"ros-tutorials/#order-to-learn","title":"Order to learn","text":"<p>1) ROS Basics - Start Roscore - Setup a ROS workspace - Create and build a ROS package - List active topics and be able to view its contents</p> <p>2) Simple Coding - Writing a Simple Publisher and Subscriber (http://wiki.ros.org/ROS/Tutorials/WritingPublisherSubscriber%28python%29) - Recording and playing back data (Rosbags) - Managing Dependencies (Rosdep)</p> <p>3) ROS Tools - Parameter Server (http://wiki.ros.org/Parameter%20Server) - Roslaunch (http://wiki.ros.org/roslaunch)  </p> <p>Go on to complete the tasks to recap what you have learnt from the tutorials.</p>"},{"location":"ros-tutorials/#additional-notes","title":"Additional notes","text":"<ul> <li>Remember to source your environment everytime you open a new terminal.</li> </ul>"},{"location":"ros/","title":"Installation","text":""},{"location":"ros/#ros","title":"ROS","text":"<p>In this page, you will be installing Windows Subsystem for Linux (WSL), Ubuntu and subsequently ROS.</p> <p>Versions: - WSL 2 - Ubuntu 20.04 - ROS Noetic  </p>"},{"location":"ros/#wsl-ubuntu","title":"WSL &amp; Ubuntu","text":"<p>WSL allows you to install a Linux distribution, run applications and bash commands directly on your Windows PC without needing to use a virtual machine or run a dual-boot setup.</p> <p>Reference link: https://learn.microsoft.com/en-us/windows/wsl/install</p>"},{"location":"ros/#additional-notes","title":"Additional notes:","text":"<ul> <li>You don't have to worry if WSL 1 will be installed since by default, WSL 2 will be installed. You can either directly install Ubuntu directly with the command line, or you can alternatively open your Microsoft Store, search for Ubuntu 20.04 and install.</li> </ul> <ul> <li>Remember your password for WSL user account as you might need it on the future.  </li> </ul>"},{"location":"ros/#ros-noetic","title":"ROS Noetic","text":"<p>Reference link: https://wiki.ros.org/noetic/Installation/Ubuntu</p>"},{"location":"ros/#notes","title":"Notes","text":"<p>Double-check that you have the correct versions installed, as there will be errors with commands otherwise.</p> <ul> <li> <p>For WSL and Ubuntu, you can enter this command into the command prompt. <pre><code>wsl -l -v\n</code></pre> You should see something like this: </p> </li> <li> <p>For ROS, you can get your ROS distribution with this command in Ubuntu. <pre><code>$ echo $ROS_DISTRO\n</code></pre></p> </li> <li> <p>Additionally, always remember to source your environment in every new terminal you open in Ubuntu! <pre><code>$ source /opt/ros/noetic/setup.bash\n</code></pre></p> <ul> <li>Some commands like rosbag or roscd might need an additional command to source before running. <pre><code>$ . ~/catkin_ws/devel/setup.bash\n</code></pre></li> </ul> </li> </ul> <p>After finishing the installation &amp; setup successfully, you can start on the ROS tutorials. </p>"},{"location":"sbc/","title":"SBC","text":""},{"location":"sbc/#sbc","title":"SBC","text":"<p>Model used: Raspberry Pi 4 (RPI4) Model B </p> <p>Related links: - Hardware documentation: https://www.raspberrypi.com/documentation/computers/getting-started.html</p>"},{"location":"sbc/#setting-up","title":"Setting up","text":"<ul> <li>Follow the default setup procedure for the RPI4 - connect it to an external monitor, mouse and keyboard. </li> <li>The SD card should already be flashed with an OS. (Ubuntu 20.04 Desktop) If not, use Imager to install the OS in the SD card.</li> <li>Code will need to be written to handle the IMU serial data. You can try writing the code using the source code from the IMU documentation first.</li> </ul>"},{"location":"sbc/#code","title":"Code","text":"<p>Click to download .txt files </p>"},{"location":"timeline/","title":"Timeline","text":""},{"location":"timeline/#timeline","title":"Timeline","text":"<p>This is the order of tasks/events that I went through during my time working as an intern. Keep in mind that your experience could be different down the road.</p> <ul> <li>Ethernet relay board: around 1.5 or 2 weeks.  </li> <li>Learning ROS: took about 2-3 weeks.  </li> <li>GNSS: 2-3 weeks  </li> <li>IMU: few days to a week.  </li> <li>SBC: 2 weeks </li> </ul> <p>And as for learning how to set up and operate the lidar, it was through constant learning throughout the internship that made me familiar with it. </p>"}]}